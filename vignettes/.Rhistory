#' @title Compute the correlation
#'
#' @description Compute either pearson or spearman group-spcific correlations.
#' @param data_case a n*p matrix.
#' @param data_control a n*p matrix
#' @param type_of_cor a character string indicating which correlation coefficient is to be computed.
#'     One of "pearson" or "spearman".
#'
#' @return A list of correlation matrix for both control and case group
#'
# Compute Pearson correlation or Spearman correlation
compute_cor <- function(data_case, data_control, type_of_cor) {
if (type_of_cor == "pearson") {
cor_case <- cor(data_case, method = type_of_cor)
cor_control <- cor(data_control, method = type_of_cor)
} else {
cor_case <- cor(data_case, method = "spearman")
cor_control <- cor(data_control, method = "spearman")
}
cor <- list("Case" = cor_case, "Control" = cor_control)
}
#' @title Permutations to build differential network
#'
#' @description A permutation test that randomly permutes the sample labels in distinct
#'     biological groups for each biomolecule. The difference in each paired biomolecule
#'     is considered significant if it falls into the 2.5% tails on either end of the empirical
#'     distribution curve.
#' @param m number of permutations.
#' @param p number of biomarker candidates.
#' @param n_control number of people in control group.
#' @param n_case number of people in case group.
#' @param data_control a n*p matrix or data.frame.
#' @param data_case a n*p matrix of data.frame.
#' @param type_of_cor a character string indicating which correlation coefficient is to be computed.
#'     One of "pearson" or "spearman".
#'
#' @return A mutidimensional matrix that contains the permutation results
# Permutation to build differential network
permutation <- function(m, p, n_control, n_case, data_control, data_case, type_of_cor) {
diff_p <- array(0, dim = c(m, p, p))
pb <- txtProgressBar(min = 0, max = m, style = 3)
for (t in 1 : m) {
Sys.sleep(0.1)
data_control_p <- matrix(0, n_control, p)
for (i in 1 : p) {
data_control_p[, i] <- data_control[sample(n_control), i]
}
data_case_p <- matrix(0, n_case, p)
for (i in 1 : p) {
data_case_p[, i] <- data_case[sample(n_case), i]
}
if (type_of_cor == "pearson") {
cor_case_p <- cor(data_case_p, method = type_of_cor)
cor_control_p <- cor(data_control_p, method = type_of_cor)
} else {
cor_case_p <- cor(data_case_p, method = "spearman")
cor_control_p <- cor(data_control_p, method = "spearman")
}
diff_p[t, , ] <- cor_case_p - cor_control_p
# update progress bar
setTxtProgressBar(pb, t)
}
close(pb)
return(diff_p)
}
#' @title Calculate the positive and negative threshold based on the permutation result
#'
#' @description Calculate the positive and negative threshold based on the permutation result.
#'
#' @param thres_left 2.5% left tails.
#' @param thres_right 2.5% right tails.
#' @param p number of biomarker candidates.
#' @param diff_p permutation results.
#'
#' @return A list of positive and negative threshold
# Calculate the positive and negative threshold based on the permutation result
permutation_thres <- function(thres_left, thres_right, p, diff_p) {
cor_thres_p <- matrix(0, p, p)
cor_thres_n <- matrix(0, p, p)
for (i in 1 : (p-1)) {
for (j in (i + 1) : p) {
cor_thres_n[i, j] <- quantile(diff_p[, i, j], probs = thres_left)
cor_thres_n[j, i] <- cor_thres_n[i, j]
cor_thres_p[i, j] <- quantile(diff_p[, i, j], probs = thres_right)
cor_thres_p[j, i] <- cor_thres_p[i, j]
}
}
cor_thres <- list("positive" = cor_thres_p, "negative" = cor_thres_n)
return(cor_thres)
}
#' @title Calculate differential network score
#'
#' @description Calculate differential network score.
#'
#' @param cor_binary binary correlation matrix with 1 indicating positive correlation and -1
#'     indicating negative correlation for paired biomarker candidate.
#' @param z_score converted from p-value.
#'
#' @return An activity score associated with each biomarker candidate for prioritization
# Calculate differential network score
compute_dns <- function(cor_binary, z_score) {
# get adjacent matrix
diff_d <- abs(cor_binary)
# set diagonal elements to 1
diag(diff_d) <- 1
# compute differential network score for each row
dns <- apply(diff_d, 1, function(x, y = z_score) sum(y[which(x == 1)]))
return(dns)
}
#' @title Calculate p-values using logistic regression
#'
#' @description Calculate p-values using logistic regression.
#'
#' @param data_combined conbined data frame or matrix of control group and case group.
#' @param class_label a binary array indicating 1: case and 0:control.
#' @param Met_name an array of KEGG ID.
#'
#' @return p-values
pvalue_logit <- function(data_combined, class_label, Met_name) {
data_combined_tp <- t(data_combined)      # n*p matrix
class_label_tp <- t(class_label)
# attach metabolites ID and class label in the data set
X <- cbind(data_combined_tp, class_label_tp)
X_df <- as.data.frame(X)      # make X a data frame
colnames(X_df)[1:ncol(X_df)-1] <- Met_name
colnames(X_df)[ncol(X_df)] <- "Class"
# encode the class variable a factor
X_df[,ncol(X_df)] <- factor(X_df[,ncol(X_df)], labels = c("Control", "Case"))
# perform logistic regression
glm.fit <- glm(Class ~., family = "binomial", data = X_df)
## Sort metabolites based on their p-values
pvalue <- summary(glm.fit)$coefficients[,4][2:ncol(X_df)]
pvalue  <<- data.frame("KEGG ID" = Met_name, "p.value" = pvalue,
stringsAsFactors = F)
}
#' @title Load the sample data
#'
#' @description Load the sample data from GU cohorts.
#' @param file_path a path from which the sample data is imported
#' @return A list of sample data set
#' @export
load_sample_data <- function(file_path) {
load(file_path, envir = .GlobalEnv)
}
#' @title Select biomarker candidates
#'
#' @description A method that integrates differential expression (DE) analysis and differential network (DN)
#'     analysis to select biomarker candidates for survival time prediction.
#' @param raw_data_control,raw_data_case a matrix or data.frame.
#' @param n number of significant biomarker candidates to be reported.
#' @param method a character string indicating which correlation coefficient is to be computed.
#'     One of "pearson" or "spearman".
#' @param p_val a path to either a data frame or matrix that contains p-values or NULL.
#' @param data_combined conbined data frame or matrix of control group and case group.
#' @param class_label a binary array with 1 indicating case group and 0 control group.
#' @param Met_name an array of KEGG ID.
#'
#' @return A list of prioritized biomarker candidates in CSV format
#'
#' @examples
#' select_sig(x, y, p, n, method)
#'
#' @importFrom utils write.csv write.table txtProgressBar
#' @importFrom stats cor quantile
#'
#' @export
select_sig <- function(raw_data_control=NULL, raw_data_case=NULL, n = NULL,
method = c("pearson", "spearman"), p_val = NULL, data_combined = NULL, class_label = NULL, Met_name = NULL) {
source("R/helper_function.R")
p <- nrow(raw_data_case)
n_case <- ncol(raw_data_case)
n_control <- ncol(raw_data_control)
# Z-transform the data for group-specific normalization
data_control <- scale(t(raw_data_control)) # Control: n1*p
data_case <- scale(t(raw_data_case))     # Case: n2*p
# Compute correlaton matrix for each group
cor <- compute_cor(data_case, data_control, type_of_cor = method)
# Get the correlation matrix
cor_case <- cor$Case
cor_control <- cor$Control
# examine the correlation matrix
thres <- 1e-3
sum(abs(cor_case) > thres)
cor_case[1:10, 1:10]
sum(abs(cor_control) > thres)
cor_control[1:10, 1:10]
rm(thres)
# Build differential networks
diff <- cor_case - cor_control # from Control group to Case group
thres = 1e-3
sum(abs(diff) > thres)
diff[1:10, 1:10]
# Permutation test
m <- 1000 # permutation times
diff_p <- permutation(m, p, n_control, n_case, data_control, data_case, type_of_cor = method)
rm(m, thres)
# calculate differential network connections
thres_left <- 0.025
thres_right <- 0.975
cor_thres <- permutation_thres(thres_left, thres_right, p, diff_p)
rm(thres_left, thres_right)
# get binary matrix
cor_thres_p <- cor_thres$positive
cor_thres_n <- cor_thres$negative
cor_binary <- matrix(0, p, p) # binary connection
cor_binary[diff < cor_thres_n] <- -1
cor_binary[diff > cor_thres_p] <- 1
cor_weight <- matrix(0, p, p) # weight connection
cor_weight[diff < cor_thres_n] <- diff[diff < cor_thres_n]
cor_weight[diff > cor_thres_p] <- diff[diff > cor_thres_p]
sum(diff < cor_thres_n)
sum(diff > cor_thres_p)
cor_binary[1:10, 1:10]
cor_weight[1:10, 1:10]
rowSums(abs(cor_binary)) # node degree for differential networks
rm(diff_p)
# Convert adjacent matrix into edge list
edge <- matrix(0, (sum(diff < cor_thres_n) + sum(diff > cor_thres_p)) / 2, 4)
k <- 1
for (i in 1:(nrow(cor_binary) - 1)) {
for (j in (i + 1) : nrow(cor_binary)) {
if(cor_binary[i, j] != 0) {
edge[k, 1] <- i
edge[k, 2] <- j
edge[k, 3] <- cor_binary[i, j]
edge[k, 4] <- cor_weight[i, j]
k <- k + 1
}
}
}
edge_dn <- data.frame("Met1" = edge[, 1], "Met2" = edge[, 2], "Binary" = edge[, 3], "Weight" = edge[, 4])
write.csv(edge_dn, file = "Met_dn.csv", quote = F, row.names = F)
rm(k, edge, edge_dn , cor_thres)
# If the p-value table is not provided by users
if (is.null(p_val) == TRUE) {
# Calculate p_values using logistic regression if p-values are not provided by users
p.value <- pvalue_logit(data_combined, class_label, Met_name)$p.value
} else {     # If the p-value matrix is provided
pvalue <- read.table(p_val, sep = ",", header = TRUE)
p.value <- pvalue$p.value           # Extract p-values from the table provided
}
# trasfer p-value to z-score
z_score <- abs(qnorm(1 - p.value / 2))
# calculate differntial network score
dn_score <- compute_dns(cor_binary, z_score)
dns_idx <- sort(dn_score, index.return = T, decreasing = T)$ix # prioritize the list
rowSums(abs(cor_binary))[dns_idx] # the node degree for each metabolite
# save top n metabolite after prioritization based on INDEED
write.table(pvalue[dns_idx[1:n],], file = "sig_table.csv", sep=",", quote = F, row.names = F,col.names = F)
}
