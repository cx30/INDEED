diff <- pc_group_2 - pc_group_1  # from group 1 to group 2
thres = 1e-3
sum(abs(diff) > thres)
diff[1:10, 1:10]
## Permutation test using partial correlation
num_of_permutations_pc <- readline(prompt = "Enter your desired number of permutations to build differential network using partial correlation: ")
m <- as.numeric(num_of_permutations_pc)
diff_p <- permutation_pc(m, p, n_group_1, n_group_2, data_group_1, data_group_2, rho_group_1_opt, rho_group_2_opt)
rm(m, thres, rho_group_1_opt, rho_group_2_opt, num_of_permutations_pc)
} else {       # Obtain the sparse network using correlation
# Compute correlaton matrix for each group
cor <- compute_cor(data_group_2, data_group_1, type_of_cor = method)    # default is pearson correlation
# Get the correlation matrix
cor_group_2 <- cor$Group2
cor_group_1 <- cor$Group1
# examine the correlation matrix
thres <- 1e-3
sum(abs(cor_group_2) > thres)
cor_group_2[1:10, 1:10]
sum(abs(cor_group_1) > thres)
cor_group_1[1:10, 1:10]
rm(thres)
# Build differential correlation networks
diff <- cor_group_2 - cor_group_1 # from group 1 to group 2
thres = 1e-3
sum(abs(diff) > thres)
diff[1:10, 1:10]
# Permutation test
num_of_permutations_c <- readline(prompt = "Enter your desired number of permutations to build differential network using correlation: ")
m <- as.numeric(num_of_permutations_c)
diff_p <- permutation_cor(m, p, n_group_1, n_group_2, data_group_1, data_group_2, type_of_cor = method)
rm(m, thres, num_of_permutations_c)
}
# calculate differential network connections
thres_left <- 0.025
thres_right <- 0.975
significant_thres <- permutation_thres(thres_left, thres_right, p, diff_p)
rm(thres_left, thres_right)
# get binary matrix
significant_thres_p <- significant_thres$positive
significant_thres_n <- significant_thres$negative
binary_link <- matrix(0, p, p) # binary connection
binary_link[diff < significant_thres_n] <- -1
binary_link[diff > significant_thres_p] <- 1
weight_link <- matrix(0, p, p) # weight connection
weight_link[diff < significant_thres_n] <- diff[diff < significant_thres_n]
weight_link[diff > significant_thres_p] <- diff[diff > significant_thres_p]
sum(diff < significant_thres_n)
sum(diff > significant_thres_p)
binary_link[1:10, 1:10]
weight_link[1:10, 1:10]
rowSums(abs(binary_link)) # node degree for differential networks
rm(diff_p)
# Convert adjacent matrix into edge list
edge <- matrix(0, (sum(diff < significant_thres_n) + sum(diff > significant_thres_p)) / 2, 4)
k <- 1
for (i in 1:(nrow(binary_link) - 1)) {
for (j in (i + 1) : nrow(binary_link)) {
if(binary_link[i, j] != 0) {
edge[k, 1] <- i
edge[k, 2] <- j
edge[k, 3] <- binary_link[i, j]
edge[k, 4] <- binary_link[i, j]
k <- k + 1
}
}
}
edge_dn <- data.frame("Met1" = edge[, 1], "Met2" = edge[, 2], "Binary" = edge[, 3], "Weight" = edge[, 4])
write.csv(edge_dn, file = "Met_dn.csv", quote = FALSE, row.names = FALSE)
rm(k, edge, edge_dn , significant_thres)
# If the p-value table is not provided by users
if (is.null(p_val) == TRUE) {
# Calculate p-values using logistic regression if p-values are not provided by users
pvalue <- pvalue_logit(x, class_label, Met_name)
p.value <- pvalue$p.value
} else {     # If the p-value matrix is provided
pvalue <- read.table(p_val, sep = ",", header = TRUE)
p.value <- pvalue$p.value           # Extract p-values from the table provided
}
# trasfer p-value to z-score
z_score <- abs(qnorm(1 - p.value/2))
# calculate differntial network score
dn_score <- compute_dns(binary_link, z_score)
indeed_df <- cbind(pvalue, rowSums(abs(binary_link)), dn_score )
# save the p-value, node degree and activity score of each biomarker candidate
write.table(indeed_df, file = "INDEED_result.csv", sep=",", quote = FALSE,
row.names = FALSE, col.names = c("ID", "P-value", "Node Degree", "Activity Score"))
}
getwd()
devtools::build()
devtools::check()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck("INDEED")
getwd()
setwd("/Users/chaohuixu/Desktop/")
BiocCheck::BiocCheck("INDEED")
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite("INDEED")
library(INDEED)
select_sig(Met_GU, Met_Group_GU, Met_name_GU, partial = TRUE,
select_sig(Met_GU, Met_Group_GU, Met_name_GU, partial = TRUE, p_val = NULL)
a <- c(1,2,3)
a
print(a)
str(a)
remove.packages("INDEED")
devtools::install_github("INDEED")
devtools::install_github(INDEED)
devtools::install_git(INDEED)
devtools::install_github("cx30/INDEED")
library("INDEED", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library(INDEED)
select_sig(Met_GU, Met_Group_GU, Met_name_GU, partial = TRUE, p_val = NULL)
a <- c(1,2,3)
c(1 2 3)
a
-a
a
rev(a)
remove.packages("INDEED")
devtools::install_github("cx/INDEED")
devtools::install_github("cx30/INDEED")
library(INDEED)
select_sig(Met_GU, Met_Group_GU, Met_name_GU, partial = TRUE, p_val = NULL)
library("INDEED", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
remove.packages("INDEED")
devtools::install_github("cx30/INDEED")
library(INDEED)
library(INDEED)
select_sig(Met_GU, Met_Group_GU, Met_name_GU, partial = TRUE,)
select_sig(Met_GU, Met_Group_GU, Met_name_GU, partial = TRUE, p_val = NULL)
select_sig(Met_GU, Met_Group_GU, Met_name_GU, partial = TRUE, p_val = NULL)
# MATH 504
# HOMEWORK 11
# Chaohui Xu
# 2
riemann <- function(n) {
h <- 10/n
grid <- seq(0, 10, h)
integral <- sum(dnorm(grid)*h)
return(integral)
}
trapezoid <- function(n) {
h <- 10/n
grid <- seq(0, 10, h)
integral <- sum(dnorm(grid)*h) - (dnorm(grid[1]) + dnorm(grid[length
(grid)]))*h/2
return (integral)
}
useR <- function(n){
integral <- integrate(dnorm, 0, 10, subdivisions=n, stop.on.error =
F)$value
return (integral)
}
# Write a function, Fapprox(n, method) that approximates F(infinity) by
# numerical integration
Fapprox <- function(n, method){
if (method == "riemann"){
riemann(n)
}else if(method == "trapezoid"){
trapezoid(n)
}else if(method == "useR"){
useR(n)
}else
print("invalid method")
}
library(plyr)
# Try n = 1:10,100,1000,10000
n <- c(1:10, 100, 1000, 10000)
df4 <- plyr::adply(n, 1, function(n) {
h <- 10/n
data.frame(n=n, h=h, riemann=Fapprox(n, "riemann"), trapezoid=Fapprox
(n, "trapezoid"),
R=Fapprox(n, "useR"))
}, .id=NULL)
options(digits=16)
df4
# 4(b)
h1=function(x)rep(1,length(x))
h2=function(x)x
h3=function(x)x^2
h4=function(x)x^3
h5=function(x)x^4
h6=function(x)x^5
h7=function(x)x^6
x =y = rep(0,11)
for (i in 1:11){
x[i]=i-1
y[i]=sin(x[i])
}
B=cbind(h1(x),h2(x),h3(x),h4(x),h5(x),h6(x),h7(x))
alpha=solve((t(B) %*% B),t(B)) %*% y
alpha
# 4(b)
h1 <- function(x)rep(1,length(x))
h2 <- function(x)x
h3 <- function(x)x^2
h4 <- function(x)x^3
h5 <- function(x)x^4
h6 <- function(x)x^5
h7 <- function(x)x^6
x = y = rep(0,11)
for (i in 1:11) {
x[i] <- i-1
y[i] <- sin(x[i])
}
B <- cbind(h1(x), h2(x), h3(x), h4(x), h5(x), h6(x), h7(x))
alpha <- solve((t(B) %*% B),t(B)) %*% y
alpha
spline <- function (x){
cbind(h1(x), h2(x), h3(x), h4(x), h5(x), h6(x), h7(x)) %*% alpha
}
plot(x, y, col='red')
curve(spline, min(x), max(x), add=T, col='blue', lwd=1)
# 4(b)
h1 <- function(x)rep(1,length(x))
h2 <- function(x)x
h3 <- function(x)x^2
h4 <- function(x)x^3
h5 <- function(x)x^4
h6 <- function(x)x^5
h7 <- function(x)x^6
x = y = rep(0,11)
for (i in 1:11) {
x[i] <- i-1
y[i] <- sin(x[i])
}
B <- cbind(h1(x), h2(x), h3(x), h4(x), h5(x), h6(x), h7(x))
alpha <- solve((t(B) %*% B),t(B)) %*% y
alpha
spline <- function (x){
cbind(h1(x), h2(x), h3(x), h4(x), h5(x), h6(x), h7(x)) %*% alpha
}
plot(x, y)
curve(spline, min(x), max(x), add=T, col='blue', lwd=1)
# 4(b)
h1 <- function(x)rep(1,length(x))
h2 <- function(x)x
h3 <- function(x)x^2
h4 <- function(x)x^3
h5 <- function(x)x^4
h6 <- function(x)x^5
h7 <- function(x)x^6
x = y = rep(0,11)
for (i in 1:11) {
x[i] <- i-1
y[i] <- sin(x[i])
}
B <- cbind(h1(x), h2(x), h3(x), h4(x), h5(x), h6(x), h7(x))
alpha <- solve((t(B) %*% B),t(B)) %*% y
alpha
spline <- function (x){
cbind(h1(x), h2(x), h3(x), h4(x), h5(x), h6(x), h7(x)) %*% alpha
}
plot(x, y, col='red')
curve(spline, min(x), max(x), add=T, col='blue', lwd=1)
library(INDEED)
select_sig(Met_GU, Met_Group_GU, Met_name_GU, partial = TRUE, p_val = NULL)
getwd()
library("INDEED", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
remove.packages("INDEED")
library(INDEED)
devtools::install_github("cx30/INDEED")
devtools::install_github("cx30/INDEED")
devtools::install_github("cx30/INDEED")
library(INDEED)
select_sig(Met_GU, Met_Group_GU, Met_name_GU, partial = TRUE)
select_sig(Met_GU, Met_Group_GU, Met_name_GU, partial = TRUE)
select_sig(Met_GU, Met_Group_GU, Met_name_GU, partial = FALSE)
select_sig(Met_GU, Met_Group_GU, Met_name_GU)
remove.packages("INDEED")
library(INDEED)
devtools::install_github("cx30/INDEED")
library(INDEED)
select_sig(Met_GU, Met_Group_GU, Met_name = Met_name_GU, partial = TRUE)
select_sig(Met_GU, Met_Group_GU, id = Met_name_GU, partial = TRUE)
select_sig(Met_GU, Met_Group_GU, Met_name_GU, partial = FALOSE)
select_sig(Met_GU, Met_Group_GU, Met_name_GU, partial = FALSE)
select_sig(Met_GU, Met_Group_GU, Met_name_GU, partial = FALSE, method = "spearman")
select_sig(Met_GU, Met_Group_GU, Met_name_GU, partial = FALSE, method = "spearma")
select_sig(Met_GU, Met_Group_GU, Met_name_GU, partial = FALSE)
devtools::document()
?select_sig
select_sig(Met_GU, Met_Group_GU, Met_name_GU, partial = TRUE)
?select_sig
library(INDEED)
?select_sig
select_sig(Met_GU, Met_Group_GU, Met_name_GU, partial = TRUE)
select_sig(Met_GU, Met_Group_GU, Met_name_GU, partial = FALSE)
select_sig(Met_GU, Met_Group_GU, Met_name_GU, partial = TRUE)
select_sig(Met_GU, Met_Group_GU, Met_name_GU, partial = TRUE)
select_sig(Met_GU, Met_Group_GU, Met_name_GU, partial = TRUE, p_val = "inst/pvalue_M_GU.csv")
select_sig(Met_GU, Met_Group_GU, Met_name_GU, partial = TRUE)
select_sig(Met_GU, Met_Group_GU, Met_name_GU, partial = TRUE)
select_sig(Met_GU, Met_Group_GU, Met_name_GU, partial = FALSE)
select_sig(Met_GU, Met_Group_GU, Met_name_GU, partial = FALSE, method = "spearman", p_val = "inst/pvalue_M_GU.csv")
select_sig(Met_GU, Met_Group_GU, Met_name_GU, partial = FALSE, method = "spearman", p_val = "inst/pvalue_M_GU.csv")
devtools::document()
devtools::check()
tools::compactPDF()
getwd()
tools::compactPDF("vignettes/Introduction_to_INDEED.Rmd")
getwd()
tools::compactPDF()
devtools::check()
check()
check(INDEED)
devtools::use_travis()
devtools::use_travis()
devtools::check_man()
BiocCheck::BiocCheck()
BiocCheck::BiocCheck(INDEED)
getwd9
getwd()
setwd("/Users/chaohuixu/Desktop/")
BiocCheck::BiocCheck(INDEED)
BiocCheck::BiocCheck()
BiocCheck::BiocCheck("INDEED")
devtools::document()
getwd()
setwd("/Users/chaohuixu/Desktop/INDEED")
devtools::document()
BiocCheck::BiocCheck("INDEED")
devtools::document()
getwd
getwd()
setwd("/Users/chaohuixu/Desktop/")
BiocCheck::BiocCheck("INDEED")
devtools::document()
getwd()
setwd()
setwd("/Users/chaohuixu/Desktop/INDEED")
devtools::document()
BiocCheck::BiocCheck("INDEED")
setwd("/Users/chaohuixu/Desktop/")
BiocCheck::BiocCheck("INDEED")
devtools::document()
getwd()
setwd("/Users/chaohuixu/Desktop/INDEED")
devtools::document()
setwd("/Users/chaohuixu/Desktop/")
BiocCheck::BiocCheck("INDEED")
setwd("/Users/chaohuixu/Desktop/INDEED")
devtools::document()
setwd("/Users/chaohuixu/Desktop/")
BiocCheck::BiocCheck("INDEED")
setwd("/Users/chaohuixu/Desktop/INDEED")
devtools::document()
setwd("/Users/chaohuixu/Desktop/")
BiocCheck::BiocCheck("INDEED")
setwd("/Users/chaohuixu/Desktop/INDEED")
devtools::document()
setwd("/Users/chaohuixu/Desktop/")
BiocCheck::BiocCheck("INDEED")
setwd("/Users/chaohuixu/Desktop/INDEED")
devtools::document()
setwd("/Users/chaohuixu/Desktop/")
BiocCheck::BiocCheck("INDEED")
devtools::document()
setwd("/Users/chaohuixu/Desktop/INDEED")
devtools::document()
setwd("/Users/chaohuixu/Desktop/")
BiocCheck::BiocCheck("INDEED")
setwd("/Users/chaohuixu/Desktop/INDEED")
devtools::document()
setwd("/Users/chaohuixu/Desktop/")
BiocCheck::BiocCheck("INDEED")
setwd("/Users/chaohuixu/Desktop/INDEED")
devtools::document()
setwd("/Users/chaohuixu/Desktop/")
BiocCheck::BiocCheck("INDEED")
setwd("/Users/chaohuixu/Desktop/INDEED")
devtools::document()
setwd("/Users/chaohuixu/Desktop/")
BiocCheck::BiocCheck("INDEED")
setwd("/Users/chaohuixu/Desktop/INDEED")
devtools::document()
setwd("/Users/chaohuixu/Desktop/")
BiocCheck::BiocCheck("INDEED")
setwd("/Users/chaohuixu/Desktop/INDEED")
devtools::document()
setwd("/Users/chaohuixu/Desktop/")
BiocCheck::BiocCheck("INDEED")
setwd("/Users/chaohuixu/Desktop/INDEED")
devtools::document()
setwd("/Users/chaohuixu/Desktop/INDEED")
setwd("/Users/chaohuixu/Desktop/")
BiocCheck::BiocCheck("INDEED")
BiocCheck::BiocCheck("INDEED")
BiocCheck::BiocCheck("INDEED")
BiocCheck::BiocCheck("INDEED")
BiocCheck::BiocCheck("INDEED")
BiocCheck::BiocCheck("INDEED")
BiocCheck::BiocCheck("INDEED")
BiocCheck::BiocCheck("INDEED")
BiocCheck::BiocCheck("INDEED")
BiocCheck::BiocCheck("INDEED")
getwd()
setwd("/Users/chaohuixu/Desktop/")
BiocCheck::BiocCheck("INDEED")
setwd("/Users/chaohuixu/Desktop/INDEED")
devtools::document()
setwd("/Users/chaohuixu/Desktop/")
BiocCheck::BiocCheck("INDEED")
library("INDEED", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
remove.packages("INDEED")
library(INDEED)
devtools::install_github("cx30/INDEED")
library(INDEED)
select_sig(Met_GU, Met_Group_GU, Met_name_GU, partial = TRUE)
select_sig(Met_GU, Met_Group_GU, Met_name_GU, partial = FALUSE)
select_sig(Met_GU, Met_Group_GU, Met_name_GU, partial = FALSE)
select_sig(Met_GU, Met_Group_GU, Met_name_GU, partial = FALSE, method = "pearson")
select_sig(Met_GU, Met_Group_GU, Met_name_GU, partial = FALSE, method = "spearman")
select_sig(Met_GU, Met_Group_GU, Met_name_GU, partial = FALSE)
devtools::build()
devtools::check()
devtools::check_man()
getwd()
setwd()
setwd("/Users/chaohuixu/Desktop/")
BiocCheck::BiocCheck("INDEED")
library("INDEED", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
remove.packages("INDEED")
library(INDEED)
getwd()
setwd("/Users/chaohuixu/Desktop/")
devtools::install_github("cx30/INDEED")
library(INDEED)
select_sig(Met_GU, Met_Group_GU, Met_name_GU, partial = TRUE)
select_sig(Met_GU, Met_Group_GU, Met_name_GU, partial = FALSE)
select_sig(Met_GU, Met_Group_GU, Met_name_GU, partial = FALSE, method = "spearman")
select_sig(Met_GU, Met_Group_GU, Met_name_GU, partial = FALSE, method = "spearma")
select_sig(Met_GU, Met_Group_GU, Met_name_GU, partial = FALSE, method = "pearson")
select_sig(Met_GU, Met_Group_GU, Met_name_GU, partial = TRUE, method = "pearson")
devtools::load_all(".")
devtools::load_all(".")
devtools::check()
getwd()
library("INDEED", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
remove.packages("INDEED")
devtools::install_github("cx30/INDEED")
devtools::install_github("cx30/INDEED")
library(INDEED)
getwd()
setwd("/Users/chaohuixu/Desktop/")
select_sig(Met_GU, Met_Group_GU, Met_name_GU, partial = TRUE)
remove.packages("INDEED")
devtools::install_github("cx30/INDEED")
library(INDEED)
select_sig(Met_GU, Met_Group_GU, Met_name_GU, partial = TRUE)
select_sig(Met_GU, Met_Group_GU, Met_name_GU, partial = FALSE)
select_sig(Met_GU, Met_Group_GU, Met_name_GU, partial = TRUE)
devtools::document()
devtools::check()
devtools::load_all(".")
devtools::check()
devtools::check()
devtools::check(document = FALSE)
devtools::document()
?select_sig
devtools::document()
?select_sig
devtools::document()
?select_sig
devtools::document()
?select_sig
devtools::document()
?select_sig
devtools::document()
library("INDEED", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
remove.packages("INDEED")
devtools::install_github("cx30/INDEED")
devtools::install_github("cx30/INDEED")
library(INDEED)
select_sig(Met_GU, Met_Group_GU, Met_name_GU, partial = TRUE)
select_sig(Met_GU, Met_Group_GU, Met_name_GU, partial = TRUE)
o
select_sig(Met_GU, Met_Group_GU, Met_name_GU, partial = TRUE)
interactive()
select_sig(Met_GU, Met_Group_GU, Met_name_GU, partial = TRUE)
library(INDEED)
select_sig(Met_GU, Met_Group_GU, Met_name_GU, partial = TRUE)
m <- 1000
m <- NULL
M
m
n <- as.numeric(m)
n
n<1
as.numeric("100")
as.numeric("100")>1
as.numeric("")>1
!as.numeric("")>1
(as.numeric("")>1)==TRUE
(as.numeric("")>1)==T
length("")
length("1")
is.na("")
is.null(" ")
is.na(" ")
remove.packages("INDEED")
devtools::check()
devtools::build()
library(INDEED)
devtools::check()
devtools::install_github("cx30/INDEED")
library(INDEED)
select_sig(Met_GU, Met_Group_GU, Met_name_GU, partial = TRUE)
select_sig(Met_GU, Met_Group_GU, Met_name_GU, partial = TRUE)
select_sig(Met_GU, Met_Group_GU, Met_name_GU, partial = TRUE)
